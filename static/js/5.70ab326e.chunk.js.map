{"version":3,"sources":["components/serShc.js"],"names":["ShowcaseServ","showcasedata","dataHeight","ell","useAppContext","isMobile","changePointer","el","useRef","q","gsap","utils","selector","registerPlugin","ScrollTrigger","useState","useLayoutEffect","set","autoAlpha","yPercent","useEffect","imageArrayfull","zIndex","i","target","targets","length","console","log","style","marginTop","className","ref","dataheight","map","item","idx","num","h4","p","a","img","id","data-bg","colors","bg","data-br","br","klass","did","active","url","text","cover","right","left","to","backgroundImage","onMouseOver","isHover","color","txt","onMouseLeave"],"mappings":"wLAwOeA,UA/NM,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,WACpC,GAD0D,EAAVC,IACZC,eAA5BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,cAGZC,GADgBC,mBACXA,oBACLC,EAAIC,IAAKC,MAAMC,SAASL,GAC9BG,IAAKG,eAAeC,KAEpB,MAAsBC,oBAAS,GAA/B,6BA+IA,OA9IAC,2BAAgB,WACXX,GACDK,IAAKO,IAAIR,EAAE,4BAA4B,CACrCS,UAAU,EAAGC,SAAS,OAG1B,CAACd,IACHe,qBAAU,WAEaX,EAAE,gBAArB,IACMY,EAAiBZ,EAAE,eACPA,EAAE,qBACNA,EAAE,sBAEhBC,IAAKO,IAAII,EAAgB,CACvBC,OAAQ,SAACC,EAAGC,EAAQC,GAAZ,OAAwBA,EAAQC,OAASH,KA2GvCd,EAAE,iCAIhB,OADAkB,QAAQC,IAAI,oBACN,eAcL,IAGD,0BACEC,MAAQxB,EAA4B,GAAlB,CAACyB,UAAW,GAC9BC,UAAU,oBACVC,IAAKzB,EACL0B,WAAY/B,EAJd,UAOGG,GAAY,cAAC,IAAD,CAAWJ,aAAcA,KAEpCI,GACA,qCACE,qBAAK0B,UAAU,YAAf,SACE,qBAAKA,UAAU,oBAAf,SACG9B,EAAaiC,KAAI,SAACC,EAAMC,GACvB,IAAQC,EAA2BF,EAA3BE,IAAKC,EAAsBH,EAAtBG,GAAIC,EAAkBJ,EAAlBI,EAAGC,EAAeL,EAAfK,EAAGC,EAAYN,EAAZM,IAAKC,EAAOP,EAAPO,GAC5B,OACE,qBAAeX,UAAS,gCAA2BK,GAAnD,SACE,sBAAKL,UAAU,yBAAf,UACE,sBACEY,UAASF,EAAIG,OAAOC,GACpBC,UAASL,EAAIG,OAAOG,GACpBhB,UAAS,oBAAeU,EAAIO,OAH9B,SAKGX,IAEH,oBAAIR,MAAe,KAARQ,EAAa,CAAEP,UAAW,SAAY,GAAjD,SACGQ,IAEI,KAANC,EAAW,KAAO,4BAAIA,IACvB,cAAC,IAAD,CACEU,IAAKP,EACLQ,QAAQ,EACRC,IAAKX,EAAEW,IACPC,KAAK,YACLL,GAAIN,EAAIG,OAAOG,SAlBXX,UA2BlB,qBAAKL,UAAU,cAAf,SACE,qBAAKA,UAAU,mBAAf,SACG9B,EAAaiC,KAAI,SAACC,EAAMC,GACvB,IAAQK,EAAQN,EAARM,IAENY,EAGEZ,EAHFY,MACAL,EAEEP,EAFFO,MAFF,EAIIP,EADFG,OAHF,EAGYU,MAHZ,EAGmBC,KAEnB,OACE,cAAC,IAAD,CAAMC,GAAIrB,EAAKK,EAAEW,IAAjB,SACA,qBACEpB,UAAWiB,EAAO,oBAClBnB,MAAO,CAAC4B,gBAAgB,QAASJ,EAAM,KACvCK,YAAa,kBAAKpD,EAAc,CAACqD,SAAS,EAAMC,MAAM,CAACf,GAAG,UAAWgB,IAAK,WAAYT,KAAM,WAC5FU,aAAc,kBAAKxD,EAAc,CAACqD,SAAS,MAJnCvB,YAWlB,qBAAKL,UAAU","file":"static/js/5.70ab326e.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef,useLayoutEffect } from \"react\";\r\nimport \"../showcase.scss\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\r\nimport Button from \"../components/button.js\";\r\nimport ShowCaseM from \"./ShowCaseMobile/ShowCaseM\";\r\nimport{Link} from \"react-router-dom\"\r\nimport { useAppContext } from \"../contexts/appcontext.js\";\r\n\r\nconst ShowcaseServ = ({ showcasedata, dataHeight, ell }) => {\r\n  const { isMobile, changePointer } = useAppContext();\r\n\r\n  const imageTimeline = useRef();\r\n  const el = useRef();\r\n  const q = gsap.utils.selector(el);\r\n  gsap.registerPlugin(ScrollTrigger);\r\n\r\n  const [set, setset] = useState(false);\r\n  useLayoutEffect(()=>{\r\n    if(isMobile){\r\n      gsap.set(q(\".showcase-full-img.first\"),{\r\n        autoAlpha:0, yPercent:10,\r\n      })\r\n    }\r\n  },[isMobile])\r\n  useEffect(() => {\r\n    // if (!isMobile) {\r\n      const imgTrigger = q(\".show-images\");\r\n      const imageArrayfull = q(\".show-image\");\r\n      const imagewrap = q(\".show-img-contain\");\r\n      const endTr = q(\".show-text-contain\");\r\n\r\n      gsap.set(imageArrayfull, {\r\n        zIndex: (i, target, targets) => targets.length - i,\r\n      });\r\n\r\n      // const images = q(\".show-image:not(.end)\");\r\n\r\n      // images.forEach((image, i) => {\r\n      //   const nextImage = image.nextElementSibling;\r\n\r\n      //    imageTimeline.current = gsap.timeline({\r\n      //     scrollTrigger: {\r\n      //       scroller:\"[data-scroll-container]\",\r\n      //       trigger: imgTrigger,\r\n      //       start: () => \"top -\" + window.innerHeight * i,\r\n      //       endTrigger: endTr,\r\n      //       end: () => \"+=\" + window.innerHeight,\r\n      //       scrub: true,\r\n      //       // invalidateOnRefresh: true,\r\n      //       markers:true,\r\n           \r\n      //     },\r\n      //   })\r\n\r\n      //   .fromTo(\r\n      //     image,\r\n      //     {\r\n      //       height: () => {\r\n      //         return \"100%\";\r\n      //       },\r\n      //       y: () => {\r\n      //         return 0;\r\n      //       },\r\n      //     },\r\n      //     {\r\n      //       height: () => {\r\n      //         return \"0%\";\r\n      //       },\r\n      //       y: () => {\r\n      //         return -20;\r\n      //       },\r\n      //       ease: \"none\",\r\n      //     },\r\n      //     0\r\n      //   )\r\n\r\n      //   .fromTo(\r\n      //     image,\r\n      //     {\r\n      //       height: () => {\r\n      //         return \"100%\";\r\n      //       },\r\n      //     },\r\n      //     {\r\n      //       height: () => {\r\n      //         return \"0%\";\r\n      //       },\r\n      //       ease: \"none\",\r\n      //     },\r\n      //     0\r\n      //   );\r\n      // });\r\n\r\n      // ScrollTrigger.create({\r\n      //   scroller:\"[data-scroll-container]\",\r\n      //   trigger: imagewrap,\r\n      //   start: () => \"center center\",\r\n      //   endTrigger: endTr,\r\n      //   end: () => \"bottom bottom\",\r\n      //   pin: imagewrap,\r\n      //   id: \"pinSc\",\r\n      //   // onEnter: ()=> console.log(\"pinning showcase\"),\r\n      //   pin: imagewrap,\r\n      // pinReparent: true,\r\n      // anticipatePin:1,\r\n      // invalidateOnRefresh: true,\r\n      //   // markers:true,\r\n      // });\r\n\r\n      // ScrollTrigger.create({\r\n      //   scroller:\"[data-scroll-container]\",\r\n      //   trigger: imgTrigger,\r\n      //   id: \"backBlackGrad\",\r\n      //   start: () => \"center bottom\",\r\n      //   endTrigger: endTr,\r\n      //   end: () => \"bottom+=14% bottom-=20%\",\r\n      //   onLeave: () =>\r\n      //     gsap.to(q(\".show-back\"), {\r\n      //       // backgroundImage:\r\n      //       //   \"linear-gradient(90deg, rgb(0 0 0)  0%, rgb(0 0 0) 100%)\",\r\n      //       opacity:0,\r\n      //       ease: \"none\",\r\n      //       duration: .6,\r\n      //     }),\r\n      //   onLeaveBack: () =>\r\n      //     gsap.to(q(\".show-back\"), {\r\n      //       // backgroundImage: \"linear-gradient(90deg,  #000  0%, #000 100%)\",\r\n      //       opacity:0,\r\n      //       autoAlpha: 0,\r\n      //       ease: \"none\",\r\n      //       duration: .6,\r\n      //     }),\r\n      //   invalidateOnRefresh: true,\r\n      //   // markers:true,\r\n      // });\r\n      \r\n      // ScrollTrigger.refresh();\r\n      // setset(true);\r\n    // }\r\n    const texts = q(\".grid-text-contain .span-back\");\r\n\r\n \r\n    console.log(\"running showcase\")\r\n    return()=>{\r\n    \r\n      // if (ScrollTrigger.getById(\"backBlackGrad\")) {\r\n      //     ScrollTrigger.\r\n      //     getById(\"backBlackGrad\").kill();\r\n      // }\r\n      // if (ScrollTrigger.getById(\"pinSc\")) {\r\n      //     ScrollTrigger.\r\n      //     getById(\"pinSc\").kill();\r\n      // }\r\n      // ScrollTrigger.refresh();\r\n      // console.log(\"cleaning showcase 3\")\r\n      // // setset(false)\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <section\r\n      style={!isMobile? {marginTop: 0 } : {}}\r\n      className=\"showcase-pin serv\"\r\n      ref={el}\r\n      dataheight={dataHeight}\r\n\r\n    >\r\n      {isMobile && <ShowCaseM showcasedata={showcasedata} />}\r\n\r\n      {!isMobile && (\r\n        <>\r\n          <div className=\"show-text\">\r\n            <div className=\"show-text-contain\">\r\n              {showcasedata.map((item, idx) => {\r\n                const { num, h4, p, a, img, id } = item;\r\n                return (\r\n                  <div key={idx} className={`serv-showcase-box box-${idx}`}>\r\n                    <div className=\"grid-text-contain text\">\r\n                      <span\r\n                        data-bg={img.colors.bg}\r\n                        data-br={img.colors.br}\r\n                        className={`span-back ${img.klass}`}\r\n                      >\r\n                        {num}\r\n                      </span>\r\n                      <h4 style={num === \"\" ? { marginTop: \"110px\" } : {}}>\r\n                        {h4}\r\n                      </h4>\r\n                      {p === \"\" ? null : <p>{p}</p>}\r\n                      <Button\r\n                        did={id}\r\n                        active={true}\r\n                        url={a.url}\r\n                        text=\"View more\"\r\n                        br={img.colors.br}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"show-images\">\r\n            <div className=\"show-img-contain\">\r\n              {showcasedata.map((item, idx, ) => {\r\n                const { img } = item;\r\n                const {\r\n                  cover,\r\n                  klass,\r\n                  colors: { right, left },\r\n                } = img;\r\n                return (\r\n                  <Link to={item.a.url}>\r\n                  <div key={idx} \r\n                    className={klass+ \" show-image fixed\"} \r\n                    style={{backgroundImage:\" url(\" +cover+\")\"}}\r\n                    onMouseOver={()=> changePointer({isHover: true, color:{bg:\"#000000\", txt: \"#ffffff\"}, text: \"Click\"})}\r\n                    onMouseLeave={()=> changePointer({isHover: false})}\r\n                  ></div>\r\n                  </Link>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className=\"show-back\"></div>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\nexport default ShowcaseServ;\r\n"],"sourceRoot":""}